package purse;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.JCSystem;
import javacard.framework.Util;

/**
 * 参考文献1：http://blog.csdn.net/supergame111/article/details/5701106（代码很全面）
 * 参看文献2：http://blog.csdn.net/lv_victor/article/details/51028930  （讲解很详细）
 * @author yunyao
 */

public class Purse extends Applet {
	//APDU Object
	private Papdu papdu;
	
	//文件系统
	private KeyFile keyfile;            //密钥文件
	private BinaryFile cardfile;       	//应用基本文件
	private BinaryFile personfile;     	//持卡人基本文件
	private EPFile EPfile;              //电子钱包文件
	
	public Purse(byte[] bArray, short bOffset, byte bLength){
		papdu = new Papdu();
		// 给bArray分配空间
		byte aidLen = bArray[bOffset];
		if(aidLen == (byte)0x00)
			register();
		else
			register(bArray, (short)(bOffset + 1), aidLen);
	}
	
	public static void install(byte[] bArray, short bOffset, byte bLength) {
		// 向智能卡中写入某种文件
		new Purse(bArray, bOffset, bLength);
	}

	public void process(APDU apdu) {
		// 如果Applet为空，退出
		if (selectingApplet()) {
			return;
		}
		
		//步骤1:取APDU缓冲区数组引用并将之赋给新建数组
		byte apdu_buffer[] = apdu.getBuffer();
		//步骤2：取APDU缓冲区中数据放到变量papdu
		//将apdu读取到卡片缓冲区当中并返回data段的长度  
		short lc = apdu.setIncomingAndReceive();
		papdu.cla = apdu_buffer[0];  
        papdu.ins = apdu_buffer[1];  
        papdu.p1 = apdu_buffer[2];  
        papdu.p2 = apdu_buffer[3];
        Util.arrayCopyNonAtomic(apdu_buffer, (short)5, papdu.pdata, (short)0, lc);
        
        if(papdu.ins == (byte)0x62){

    		PenCipher penci = new PenCipher();
    		byte[] key = new byte[]{0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12};
    		byte[] data = new byte[]{0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22};
    		byte[] mac = new byte[4];
    		
    		penci.gmac4(key, data, (short)8, mac);
    		
    		//ISOException.throwIt((short) mac.length);
    		
    		Util.arrayCopyNonAtomic(mac, (short)0, apdu_buffer, (short)0, (short) 4);

            apdu.setOutgoingAndSend((short)0, (short)4);//把缓冲区的数据返回给终端  
        }else{
	        
			/*
			 * 步骤3：判断命令APDU是否包含数据段，有数据则获取数据长度，并对le赋值
			 * 否则，即不需要lc和data，则获取缓冲区原本lc实际上是le
			 * 获取le的方法，因为不确定papdu有le部分，所以IOS7816下标可选项并没有le而是放在数据块中的. 
			 * 如果有数据块，那le就是buffer[ISO7816.OFFSET_CDATA+lc]  
			 * 调用papdu函数判断,不能直接通过lc判断,因为没lc只有le也会把le赋给lc  
			 * 
			 * 若papdu命令包含数据块  ，则需要更新le
			 * 否则，将data的长度直接赋值给le
			 * 注：LE字节表示的是期望卡片发回来的字节长度
			 */
			
			if(papdu.APDUContainData()) {
			    papdu.le = apdu_buffer[ISO7816.OFFSET_CDATA+lc];  
			    papdu.lc = apdu_buffer[ISO7816.OFFSET_LC];
			}  else {  
			    papdu.le = apdu_buffer[ISO7816.OFFSET_LC];
			    papdu.lc = 0;  
			}  
			// rc获取返回数据，判断操作是否成功
	        boolean rc = handleEvent();
			//步骤4:判断是否需要返回数据，并设置apdu缓冲区	
	        //if(papdu.le != 0)
	        // 如果成功，则返回数据，并且设置apdu缓冲区
	        if( rc ) {
	            Util.arrayCopyNonAtomic(papdu.pdata, (short)0, apdu_buffer, (short)5, (short)papdu.pdata.length);  
	            apdu.setOutgoingAndSend((short)5, papdu.le);//把缓冲区的数据返回给终端  
	        }  
        }
        
	}

	/*
	 * 功能：对命令的分析和处理
	 * 参数：无
	 * 返回：是否成功处理了命令
	 * 《01 Java智能卡之概述》 P30
	 */
	private boolean handleEvent(){
		switch(papdu.ins){
			case condef.INS_CREATE_FILE:return create_file(); 				// 0xE0 文件创建
			//todo：完成写二进制命令，读二进制命令，写密钥命令
            case condef.INS_WRITE_KEY: 	return write_key();  				// 0xD4 写秘钥
            case condef.INS_WRITE_BIN:	return write_read_bin((byte)'U');  	// 0xD6 写二进制文件
            case condef.INS_READ_BIN:	return write_read_bin((byte)'R');  	// 0xB0读二进制文件
    		case condef.INS_NIIT_TRANS:	return init_load_purchase(papdu.p1);// 0x50消费初始化或者圈存初始化
    		case condef.INS_LOAD:		return load();						// 0x圈存
    		case condef.INS_PURCHASE:	return purchase();					// 0x消费
    		case condef.INS_GET_BALANCE:return get_balance();				// 0x查询余额
		}	
		ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED); // 0x6D00 表示 CLA错误 
		return false;
	}
	
	/*
	 * 写密钥  
	 * 密钥文件是按照记录逐一写入的，也就是有几条密钥记录，就需要发送几条“写密钥”的命令。
	 * 终端发送“写密钥”命令，卡片执行对应的操作，取出命令中的数据，并写入已建立的密钥文件中。
	 */
    private boolean write_key() {
    	
    	//每个应用只能有一个KEY文件，且必须最先建立
        //《02 电子钱包的文件系统》P19
        if(keyfile == null)
            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);  
        
        if( papdu.cla != (byte)0x80)
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED); 
        
        if(papdu.ins != condef.INS_WRITE_KEY)
            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);   
  
        //秘钥文件的p1为0x00， p2
        //write_key中p1必须为0x00，p2必不在0x16到0x18，否则就是另外三种文件
        if(papdu.p1 != (byte)0x00 || (papdu.p2 >= (byte)0x16 && papdu.p2 <= (byte)0x18))  
            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
        
        //秘钥长度是否正确
        if(papdu.lc != (byte)0x15)
            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);  
  
        //文件空间已满  
        if(keyfile.recNum >= 3)
            ISOException.throwIt(ISO7816.SW_FILE_FULL);  
  
        keyfile.addkey(papdu.p2, papdu.lc, papdu.pdata);//写入一条密钥  
  
        return true;  
    }  

    /*
     * 读写选择器
     * 《01 Java智能卡之概述》 P30
     */
    private boolean write_read_bin(byte U_R){
    	switch(U_R){
    		case (byte)'U': return write_binary();
    		case (byte)'R': return read_binary();
    		default : return false;
    	}
    }
    
    private boolean init_load_purchase(short load_purchase){
    	switch(load_purchase){
    		case (short)0x00: return init_load();
    		case (short)0x01: return init_purchase();
    		default : return false;
    	}
    }
    
    /**
     * 写二进制文件
     * 写二进制文件只需要一条命令
     * 根据命令的内容获得需要参数
     * 并写入已创建的持卡人基本文件或应用基本文件中；
     * ！！！注意：写入前要先检测写入的数据是否超过文件限定的大小
     * @return
     */
    private boolean write_binary() {  
    	
    	//首先判断cla是否确实为0x00，才能继续执行
        if(papdu.cla != (byte)0x00)  
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);  
    	
        //每个应用只能有一个KEY文件，且必须最先建立
        //《02 电子钱包的文件系统》P19
        if(keyfile == null)
            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);
  
        //写入前要先检测写入的数据是否超过文件限定的大小
        //写入data长度应该在1-255之间
        if(papdu.lc <= 0x00 || papdu.lc >= 0xFF)
            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);

        /*
         * 持卡人或者卡不应该为空，如果不为空就可以开始写文件了
         */
        //应用基本文件为0x16，应用文件不应该为空
        if(papdu.p1 == (byte)0x16 && cardfile == null)  
            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);
        //持卡人基本文件为0x17，持卡人不应该为null
        if(papdu.p1 == (byte)0x17 && personfile == null)  
            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);  

        //应用基本文件为0x16， 持卡人基本文件为0x17
        if(papdu.p1 == (byte)0x16){
            cardfile.write_bineary(papdu.p2, papdu.lc, papdu.pdata); 
        } else if(papdu.p1 == (byte)0x17){
            personfile.write_bineary(papdu.p2, papdu.lc, papdu.pdata);  
        }
  
        return true;  
    }  
    
    /**
     * 读取二进制文件
     * 类似  
     * @return
     */
    private boolean read_binary() {  
    	
    	//首先判断cla是否确实为0x00，才能继续执行
        if(papdu.cla != (byte)0x00)  
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);  
    	
        if(keyfile == null)
            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);

        //应用基本文件为0x16，应用文件不应该为空
        if(papdu.p1 == (byte)0x16 && cardfile == null)  
            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);
        //持卡人基本文件为0x17，持卡人不应该为null
        if(papdu.p1 == (byte)0x17 && personfile == null)  
            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);  
  
        //读取相应的二进文件  
        if(papdu.p1 == (byte)0x16){
            this.cardfile.read_binary(papdu.p2, papdu.le, papdu.pdata);
        }
        else if(papdu.p1 == (byte)0x17){
            this.personfile.read_binary(papdu.p2, papdu.le, papdu.pdata);
        }
  
        return true;  
    }  
	
	/*
	 * 功能：创建文件
	 */
	private boolean create_file() {
		// 判断DATA域文件控制信息（AEF）
		switch(papdu.pdata[0]){
		case condef.EP_FILE:        return EP_file();   	// 0x2F电子钱包文件
		//todo:完成创建密钥文件，持卡人基本文件和应用基本文件
        case condef.PERSON_FILE:	return Person_file(); 	// 0x39持卡人基本文件
        case condef.CARD_FILE:	    return Card_file();  	// 0x38应用基本文件
		case condef.KEY_FILE:      	return Key_file();  	// 0x3F密钥文件
		default: 
			ISOException.throwIt(ISO7816.SW_FUNC_NOT_SUPPORTED);
		}
		return true;
	}
	/*
	 * 功能：创建电子钱包文件
	 * 样例，其他文件的实现方式类似
	 */
	private boolean EP_file() {
		// CLA：识别电子卡
		if(papdu.cla != (byte)0x80)
			ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
		
		//EP的ins必须为0xE0，校验以免误调用
		if(papdu.ins != condef.INS_CREATE_FILE)
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);

		//p1应该为0x00，p2应该为0x18
		if(papdu.p1 != (byte)0x00 || papdu.p2 != (byte)0x18)
			ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
		
		// LC：Data Field之长度
		// 文件创建时文件信息长度为0x07
		if(papdu.lc != (byte)0x07)
			ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		
		// 如果已经被分配
		if(EPfile != null)
			ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);
        
		//每个应用只能有一个KEY文件，且必须最先建立
        //《02 电子钱包的文件系统》P19
        if(keyfile == null)
            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);  
		
		EPfile = new EPFile(keyfile);
		
		return true;
	}	

	/*
	 * 
	 * 持卡人信息文件  
	 */
    private boolean Person_file() {  
    	
        if(papdu.cla != (byte)0x80)  
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);  

		//EP的ins必须为0xE0，校验以免误调用
		if(papdu.ins != condef.INS_CREATE_FILE)
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
		
		//p1应该为0x00, p2应该为0x17
		if(papdu.p1 != (byte)0x00 || papdu.p2 != (byte)0x17)
			ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
		
        if(papdu.lc != (byte)0x07)  
            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);  
  
        if(personfile != null)
            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);
        
        //每个应用只能有一个KEY文件，且必须最先建立
        //《02 电子钱包的文件系统》P19
        if(keyfile == null)
            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);  
  
        //将数据写入personfile
        personfile = new BinaryFile(papdu.pdata);
  
        return true;  
    }  
	    
    /*
     * Key_file()
     * 密钥文件  
     * 仿照EP_file实现
     */
    private boolean Key_file() {

        if(papdu.cla != (byte)0x80)  
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);  

		//EP的ins必须为0xE0，校验以免误调用
		if(papdu.ins != condef.INS_CREATE_FILE)
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);

		//p1应该为0x00， p2应该为0x00
		if(papdu.p1 != (byte)0x00 || papdu.p2 != (byte)0x00)
			ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
		
        // LC 应该为0x07, word中说的15有错
        if(papdu.lc != (byte)0x07)  
            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);  
  
        if(keyfile != null)
            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);  
  
        //keyfile在Key_file中创建，故不需要判断是否为null
        keyfile = new KeyFile();
  
        return true;  
    }  
    
    /*
     * 应用 
     * 创建应用基本文件  
     */
    private boolean Card_file() {  
    	
        if(papdu.cla != (byte)0x80)  
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);  

		//EP的ins必须为0xE0，校验以免误调用
		if(papdu.ins != condef.INS_CREATE_FILE)
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);

		//p1应该为0x00, p2应该为0x16
		if(papdu.p1 != (byte)0x00 || papdu.p2 != 0x16)
			ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
		
        if(papdu.lc != (byte)0x07)  
            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);  
  
        if(cardfile != null)
            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);  
        
        if(keyfile == null)
            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);  
  
        //将数据写入cardfile
        cardfile = new BinaryFile(papdu.pdata);
  
        return true;  
    }  
    
	/*
	 * 功能：圈存初始化命令的实现
	 */
	private boolean init_load() {
		short num,rc = 0;
		
		if(papdu.cla != (byte)0x80)
			ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
		
		if(papdu.ins != (byte)0x50)
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
		
		if(papdu.p1 != (byte)0x00 && papdu.p2 != (byte)0x02)
			ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
		
		if(papdu.lc != (short)0x0B)
			ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		
		if(EPfile == null)
			ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);
		
		//pdata[0]交易索引号，根据索引号寻找秘钥
		num = keyfile.findkey(papdu.pdata[0]);
		
		if(num == 0x00)
			ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);
		
		/*
		 * 检查EPFile，只会返回2或者0， 2表示超额，0表示成功
		 * 传入参数，秘钥标识符num，[交易金额 | 终端机编号]papdu.pdata
		 * 结果会在参数2中，结构如下
		 * 余额4bytes | 联机交易序列号2bytes | 秘钥版本号1byte | 算法标识1byte | 伪随机数4bytes | mac14bytes
		 * eg： 08 00 00 10 00 00 11 22 33 44 55 10
		 * 00 01 00 46 C0 E4 3D 99 5F 3E 5F
		 */
		rc = EPfile.init4load(num, papdu.pdata);
		
		if(rc == 2)
			ISOException.throwIt((condef.SW_LOAD_FULL));		
		
		papdu.le = (short)0x10;
		
		return true;
	}
    
    /*
	 * 功能：圈存命令的实现
	 */
	private boolean load() {
		short rc;
		
		if(papdu.cla != (byte)0x80)
			ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
		
		if(papdu.p1 != (byte)0x00 && papdu.p2 != (byte)0x00)
			ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
		
		if(EPfile == null)
			ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);
		
		if(papdu.lc != (short)0x0B)
			ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		
		rc = EPfile.load(papdu.pdata);
		
		if(rc == 1)//MAC2验证未通过
			ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
		else if(rc == 2)//
			ISOException.throwIt(condef.SW_LOAD_FULL);
		else if(rc == 3)
			ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);
		
		papdu.le = (short)4;
		
		return true;
	}

	
	/*
	 * 功能：消费命令的实现
	 */
	private boolean purchase(){
		return true;
	}
	/*
	 * 功能：余额查询功能的实现
	 */
	private boolean get_balance(){
		return true;
	}
	
	/*
	 * 功能：消费初始化的实现
	 */
	private boolean init_purchase(){
		short num,rc = 0;
		
		if(papdu.cla != (byte)0x80)
			ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);

		if(papdu.ins != (byte)0x50)
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
		
		//p1应该为0x01，p2应该为0x02
		if(papdu.p1 != (byte)0x01 && papdu.p2 != (byte)0x02)
			ISOException.throwIt(ISO7816.SW_WRONG_P1P2);
		
		if(papdu.lc != (short)0x0B)
			ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		
		//根据tag寻找密钥返回密钥的记录号  
		if(EPfile == null)
			ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);

		// 如果EPfile存在，就不用在判断Keyfile是否存在了，因为Keyfile存在是EPfile的前提
		num = keyfile.findkey(papdu.pdata[0]);
		
		/*找不到相应的秘钥
		 * IC卡根据密钥标识符，在密钥文件中查找该密钥标识符对应的消费密钥
		 * 如果找不到，就返回状态字“9403”，表示不存在相对应的密钥。
		 * 如果找到的话，就进行以下的处理
		 * /
		if(num == 0x00)
			ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);
		
		//调用默认的init4purchase，其他的类似
		rc = EPfile.init4purchase(num, papdu.pdata);
		
		if(rc == 2)
			ISOException.throwIt((condef.SW_BALANCE_NOT_ENOUGH));
		
		//init_purchase初始化期待的LE为0x0F，而不是0x10
		papdu.le = (short)0x0F;
		
		return true;
	}
}
